from flask import Blueprint, request, jsonify
from flasgger import swag_from
from utils.twilio import send_sms

meeting_bp = Blueprint('meeting_bp', __name__)  # Declare the meeting blueprint

@meeting_bp.route('/doctor-call', methods=['POST'])
@swag_from({
    'summary': 'Initiate a doctor call by sending an SMS with the meeting link',
    'tags': ['Meeting'],
    'parameters': [
        {
            'name': 'body',
            'in': 'body',
            'required': True,
            'schema': {
                'type': 'object',
                'properties': {
                    'meeting_id': {
                        'type': 'string',
                        'description': 'The unique meeting ID generated by the frontend'
                    }
                },
                'required': ['meeting_id']
            },
            'example': {
                'meeting_id': 'unique-meeting-id-123'
            }
        }
    ],
    'responses': {
        200: {
            'description': 'Doctor called successfully',
            'content': {
                'application/json': {
                    'example': {
                        'message': 'Doctor called successfully'
                    }
                }
            }
        },
        400: {
            'description': 'Validation error for missing meeting ID',
            'content': {
                'application/json': {
                    'example': {
                        'error': 'Meeting ID is required'
                    }
                }
            }
        },
        500: {
            'description': 'Internal server error while sending SMS',
            'content': {
                'application/json': {
                    'example': {
                        'error': 'Failed to send SMS: <error-message>'
                    }
                }
            }
        }
    }
})
def doctor_call():
    data = request.json  # Get the JSON data sent by the client

    # Extract the meeting_id from the request
    meeting_id = data.get('meeting_id')
    if not meeting_id:
        return jsonify({"error": "Meeting ID is required"}), 400

    # Generate the moderator URL for the meeting
    moderator_url = f'https://meet.jit.si/{meeting_id}#config.prejoinPageEnabled=false&userInfo.displayName=Moderator'

    # Doctor's phone number (hardcoded for now; can be passed dynamically if needed)
    doctor_phone = '+917009023965'

    # Send SMS to the doctor with the meeting link
    try:
        send_sms(doctor_phone, f'Click this link to join the meeting as a moderator: {moderator_url}')
        return jsonify({"message": "Doctor called successfully"}), 200
    except Exception as e:
        return jsonify({"error": f"Failed to send SMS: {str(e)}"}), 500
